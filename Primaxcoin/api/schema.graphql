scalar GraphQLDate

enum InvestmentPlan {
  starter
  basic
  standard
  superStandard
  premium
  superPremium
}

enum Gender {
  male
  female
  other
}

type User {
  firstName: String
  lastName: String
  address: String
  country: String
  phoneNumber: String
  gender: Gender
  email: String
  referralID: String
  referrer: String
  passwordHash: String
  secretQuestion: String
  answer: String
  dp: String
  wallet: String
  date: GraphQLDate
  admin: Boolean
}

type ResetToken {
  email: String!
  expiration: GraphQLDate!
  token: String!
  used: Int!
}

"Toned down User, used as inputs, without server generated values."
input UserInput {
  email: String!
  passwordHash: String!
}

input UserUpdateInput {
  firstName: String
  lastName: String
  gender: Gender
  email: String
  phoneNumber: String
  address: String
  referrer: String
  referralID: String
  wallet: String
  passwordHash: String
  secretQuestion: String
  answer: String
  city: String
  postalCode: String
}

type Query {
  about: String!
  user(email: String): User!
  auth(email: String!, passwordHash: String!): Boolean!
  userList(offset: Int, count: Int, order: Boolean): [User!]!
  getResetToken(email: String): ResetToken!
  getResetTokenWithToken(token: String): ResetToken!
}

type Mutation {
  signUp(email: String, passwordHash: String): Boolean!
  setAboutMessage(message: String!): String
  updateUser(username: String, changes: UserUpdateInput): Boolean!
  createResetToken(email: String!): Boolean!
  deleteResetToken(email: String!): Boolean!
  sendResetEmail(email: String!, token: String!): Boolean!
}
